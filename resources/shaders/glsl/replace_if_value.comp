// this Vulkan/GLSL compute shader replaces all elements of 'data' with the given value
// if the corresponding element of the condition map is !=0

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ConditionBuffer {
    float condition[];
};
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_8)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint condition_rows;
    uint condition_cols;
    uint condition_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float replacing_value;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint condition_elements = condition_rows * condition_cols * condition_depth;
uint data_subspace_x = data_cols * data_depth;
uint condition_subspace_x = condition_cols * condition_depth;
float epsilon = 0.0000001;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint data_3dx = uint(x / data_subspace_x);
    uint data_3dy = uint((x % data_subspace_x) / data_depth);
    uint data_3dz = uint((x % data_subspace_x) % data_depth);
    uint condition_x = data_3dx * condition_subspace_x + data_3dy * condition_depth + data_3dz;
    if (x < data_elements) {
        if (condition_x < condition_elements) {
            result[x] = abs(condition[condition_x]) > epsilon ? replacing_value : data[x];
        }
        else {
            result[x] = data[x];
        }
    }
}