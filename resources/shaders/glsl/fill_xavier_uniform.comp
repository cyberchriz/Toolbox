// Vulkan/GLSL compute shader
// author: Christian Suer (github: 'cyberchriz')

#version 450 core

// setup specialization constants
// in "main" use gl_WorkGroupSize.x / gl_WorkGroupSize.y / gl_WorkGroupSize.z to get the actual workgroup size
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// setup buffers
layout(set = 0, binding = 0) buffer data_buffer {float data[];};

// setup push constants layout
layout(push_constant) uniform push_constants {
    uint fan_in;
    uint fan_out;
    uint seed;
};

// Simple random float function based on seed
float random(uint seed) {
    uint state = seed;
    state ^= state << 13;
    state ^= state >> 17;
    state ^= state << 5;
    return float(state & 0xFFFFFFFF) / 4294967295.0;
}

// main function
void main() {
    // adding the workgroup id to the seed in order to get a different seed for each workgroup
    data[gl_GlobalInvocationID.x] = random(seed + gl_GlobalInvocationID.x) * sqrt(2.0 / sqrt(fan_in + fan_out));
}
