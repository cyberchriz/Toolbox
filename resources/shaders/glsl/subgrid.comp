// Vulkan/GLSL compute shader
// author: Christian Suer (github: 'cyberchriz')

#version 450 core
#define MAX_DIMENSIONS 10


// setup specialization constants
// in "main" use gl_WorkGroupSize.x / gl_WorkGroupSize.y / gl_WorkGroupSize.z to get the actual workgroup size
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// setup buffers
layout(set = 0, binding = 0) buffer data_buffer {float data[];};
layout(set = 0, binding = 1) buffer shape_buffer {uint shape[];};
layout(set = 0, binding = 2) buffer subgrid_buffer {float subgrid[];};
layout(set = 0, binding = 3) buffer subgrid_shape_buffer {uint subgrid_shape[];};
layout(set = 0, binding = 4) buffer source_offset_buffer {uint source_offset[];};

// setup push constants layout
layout(push_constant) uniform push_constants {
    uint dimensions;
    uint N;
};

// main function
void main() {
    if (gl_GlobalInvocationID.x < N) {

        // convert flat index to multidimensional index
        uint subgrid_multi_index[MAX_DIMENSIONS];
        uint flat_index = gl_GlobalInvocationID.x;
        for (int i = int(dimensions) - 1; i >= 0; --i) {
            subgrid_multi_index[i] = flat_index % subgrid_shape[i];
            flat_index = flat_index / subgrid_shape[i];
        }

        // get corresponding multidimensional index of the source data array
        uint data_multi_index[MAX_DIMENSIONS];
        bool out_of_bounds = false;
        for (uint i = 0; i < dimensions; ++i) {
            data_multi_index[i] = subgrid_multi_index[i] + source_offset[i];
            out_of_bounds = data_multi_index[i] >= shape[i];
        }

        if (!out_of_bounds) {
            // convert multidimensional source array index back to flat index
            uint data_flat_index = 0;
            for (uint i = 0; i < dimensions; i++) {
                data_flat_index = data_flat_index * shape[i] + data_multi_index[i];
            }
            // write data to the subgrid
            subgrid[gl_GlobalInvocationID.x] = data[data_flat_index];
        }
    }
}
