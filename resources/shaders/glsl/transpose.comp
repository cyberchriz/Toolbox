// Vulkan/GLSL compute shader
// author: Christian Suer (github: 'cyberchriz')

#version 450 core

// default constants
#define MAX_DIMENSIONS 10

// setup specialization constants
// in "main" use gl_WorkGroupSize.x / gl_WorkGroupSize.y / gl_WorkGroupSize.z to get the actual workgroup size
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// setup buffers
layout(set = 0, binding = 0) buffer data_buffer {float data[];};
layout(set = 0, binding = 1) buffer data_shape_buffer {uint data_shape[];};
layout(set = 0, binding = 2) buffer target_axis_order_buffer {uint target_axis_order[];};
layout(set = 0, binding = 3) buffer result_buffer {float result[];};
layout(set = 0, binding = 4) buffer result_shape_buffer {uint result_shape[];};

// setup push constants layout
layout(push_constant) uniform push_constants {
    uint dimensions;
    uint data_N;
};

// main function
void main() {
    if (gl_GlobalInvocationID.x < data_N) {

        // define local arrays
        uint data_array_index[MAX_DIMENSIONS];
        uint result_array_index[MAX_DIMENSIONS];

        // get multidimensional index of current element of the source data
        uint data_flat_index = gl_GlobalInvocationID.x;
        for (int i = int(dimensions) - 1; i >= 0; --i) {
            data_array_index[i] = data_flat_index % data_shape[i];
            data_flat_index = data_flat_index / data_shape[i];
        }

        // convert data index to corresponding result index
        for (uint i = 0; i < dimensions; i++) {
            result_array_index[target_axis_order[i]] = data_array_index[i];
        }

        // calculate flat index of current element in the result buffer
        uint result_flat_index = 0;
        for (uint i = 0; i < dimensions; i++) {
            result_flat_index = result_flat_index * result_shape[i] + result_array_index[i];
        }

        // write the data value to the result buffer
        result[result_flat_index] = data[gl_GlobalInvocationID.x];
    }
}