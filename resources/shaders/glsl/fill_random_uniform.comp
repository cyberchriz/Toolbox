// Vulkan/GLSL compute shader
// author: Christian Suer (github: 'cyberchriz')

#version 450 core

// setup specialization constants
// in "main" use gl_WorkGroupSize.x / gl_WorkGroupSize.y / gl_WorkGroupSize.z to get the actual workgroup size
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// setup buffers
layout(set = 0, binding = 0) buffer data_buffer {float data[];};

// setup push constants layout
layout(push_constant) uniform push_constants {
    uint N;
    uint seed;
    float min_val;
    float max_val;
};

// pseudo-random number generator as a "Permuted Congruential Generator" (PCG);
// results are in range [0,1]
float random(uint seed) {
    uint state = seed * 747795U + 2891234U;
    uint word = ((state >> ((state >> 28U) + 4U)) ^ state) * 2778037U;
    return float(((word >> 22U) ^ word) & 0xFFFFFFFF) / 4294967295.0;
}

// main function
void main() {
    if (gl_GlobalInvocationID.x < N) {
        // adding the seed to the global invocation ID to ensure different random numbers for each invocation
        data[gl_GlobalInvocationID.x] = random(seed + gl_GlobalInvocationID.x) * (max_val - min_val) + min_val;
    }
}
