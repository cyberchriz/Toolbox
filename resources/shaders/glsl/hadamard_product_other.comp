// Vulkan/GLSL compute shader
// author: Christian Suer (github: 'cyberchriz')

#version 450 core

// default constants
#define MAX_DIMENSIONS 10

// setup specialization constants
// in "main" use gl_WorkGroupSize.x / gl_WorkGroupSize.y / gl_WorkGroupSize.z to get the actual workgroup size
layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

// setup buffers
layout(set = 0, binding = 0) buffer data_buffer {float data[];};
layout(set = 0, binding = 1) buffer data_shape_buffer {uint data_shape[];};

layout(set = 0, binding = 2) buffer other_buffer {float other_data[];};
layout(set = 0, binding = 3) buffer other_shape_buffer {uint other_shape[];};

layout(set = 0, binding = 4) buffer result_buffer {float result[];};

// setup push constants layout
layout(push_constant) uniform push_constants {
    uint data_dimensions;
    uint other_dimensions;
    uint N;
    uint other_N;
};

// main function
void main() {
    if (gl_GlobalInvocationID.x < N) {
        if (gl_GlobalInvocationID.x < other_N) {
            // get the multidimensional index of the source array
            uint data_array_index[MAX_DIMENSIONS];
            uint flat_index = gl_GlobalInvocationID.x;
            for (int i = int(data_dimensions) - 1; i >= 0; --i) {
                data_array_index[i] = flat_index % data_shape[i];
                flat_index = flat_index / data_shape[i];
            }

            // get corresponding flat index of the 'other' array
            // based on the subspace sizes of 'other'
            uint other_flat_index = 0;
            for (uint i = 0; i < other_dimensions; i++) {
                other_flat_index = other_flat_index * other_shape[i] + data_array_index[i];
            }
            
            if (other_flat_index < other_N) {
                // assign product of element value multiplied by corresponding value of 'other'
                result[gl_GlobalInvocationID.x] = data[gl_GlobalInvocationID.x] * other_data[other_flat_index];
            }
            else {
                // assign original data value to result in case 'other' is out of bounds
                result[gl_GlobalInvocationID.x] = data[gl_GlobalInvocationID.x];
            }
        }
        else {
            result[gl_GlobalInvocationID.x] = data[gl_GlobalInvocationID.x];
        }
    }
}
