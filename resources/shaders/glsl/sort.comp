// this Vulkan/GLSL compute shader implements a ranking-based sort algorithm

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[]; // result[0] is initialized to 0
};

// setup push constants layout (according to shader_exec OVERLOAD_2)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float constant1;        // not used for this shader
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint result_elements = result_rows;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint rank = 0;
    float current_value = data[x];
    for (uint i = 0; i < result_elements; i++) {
        if (data[i] < current_value || (data[i] == current_value && i < x)) {
            rank++;
        }
    }
    result[rank] = current_value;
}