// this Vulkan/GLSL compute shader searches the array for any matches
// of the 'old_value' (as specified via push constant) and replaces any finding
// with the specified 'new_value'; all other value of 'this' remain unchanged;
// the result is stored as a new array

#version 450
#define WORKGROUP_SIZE 256

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_2)
layout(push_constant) uniform PushConstants {
    uint data_elements;
    float old_value;
    float new_value;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
float epsilon = 0.0000001;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < data_elements) {
        result[x] = abs(data[x] - old_value) <= epsilon ? new_value : data[x];
    }
}