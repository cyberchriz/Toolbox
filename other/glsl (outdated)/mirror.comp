// this Vulkan/GLSL compute shader implements min pooling

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    int mirror_rows;
    int mirror_cols;
    int mirror_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;
bool mirror_rows_bool = bool(mirror_rows);
bool mirror_cols_bool = bool(mirror_cols);
bool mirror_depth_bool = bool(mirror_depth);

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < result_elements) {
        uint result_3dx = uint(x / result_subspace_x);
        uint result_3dy = uint((x % result_subspace_x) / result_depth);
        uint result_3dz = uint((x % result_subspace_x) % result_depth);
        uint data_3dx = mirror_rows_bool ? data_rows - result_3dx - 1 : result_3dx;
        uint data_3dy = mirror_cols_bool ? data_cols - result_3dy - 1 : result_3dy;
        uint data_3dz = mirror_depth_bool ? data_depth - result_3dz - 1 : result_3dz;
        uint data_flat_index = data_3dx * data_subspace_x + data_3dy * data_depth + data_3dz;
        result[x] = data[data_flat_index];
    }
}