// this Vulkan/GLSL compute shader calculates the sample kurtosis of the
// data buffer elements across all dimensions
// via parallel reduction and stores the final result in result[0]

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer PartialSumBuffer {
    float partial_sum[];
};
layout(set = 0, binding = 2) buffer Mdev2Buffer {
    float mdev2[];
};
layout(set = 0, binding = 3) buffer Mdev4Buffer {
    float mdev4[];
};
layout(set = 0, binding = 4) buffer ResultBuffer {
    float result[];
};
layout(set = 0, binding = 5) buffer SignalBuffer {
    uint signal[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_elements;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;


// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint workgroups = uint(ceil(float(data_elements) / WORKGROUP_SIZE));
    uint workgroup_ID = x / WORKGROUP_SIZE;
    signal[workgroup_ID] = 0;

    if (x < data_elements) {
        // copy elements from data
        partial_sum[x] = data[x];
        barrier();

        // calculate partial sum of workgroup via parallel reduction
        for (uint i = 1; i < WORKGROUP_SIZE; i*=2) {
            if (x % (2*i) == 0 && x+i < data_elements) {
                partial_sum[x] += partial_sum[x+i];
            }
            barrier();
        }
        // declare workgroup as finished
        if (gl_LocalInvocationID.x == 0) {
            signal[workgroup_ID] = 1;
        }
        // add partial sums across workgroups
        float mean = 0;
        for (uint i = 0; i < workgroups; i++) {
            uint loop_count = 0;
            while (signal[i] < 1 && loop_count < 10000) {
                memoryBarrier();
                loop_count++;
            }
            mean += partial_sum[i*WORKGROUP_SIZE];
        }
        mean /= data_elements;

        // store squared and quartic mean deviation in corresponding buffers
        mdev2[x] = pow(data[x] - mean, 2);
        mdev4[x] = pow(data[x] - mean, 3);
        barrier();

        // calculate partial sum (within workgroup) of squared and quartic mean deviations via parallel reduction
        for (uint i = 1; i < WORKGROUP_SIZE; i*=2) {
            if (x % (2*i) == 0 && x+i < data_elements) {
                mdev2[x] += mdev2[x+i];
                mdev4[x] += mdev4[x+1];
            }
            barrier();
        }
        if (gl_LocalInvocationID.x == 0) {
            signal[workgroup_ID] = 2;
        }

        if (x == 0) {
            // add partial sums across workgroups
            for (uint i = 1; i < workgroups; i++) {
                uint loop_count = 0;
                while (signal[i] < 2 && loop_count < 10000) {
                    memoryBarrier();
                    loop_count++;
                }
                mdev2[0] += mdev2[i*WORKGROUP_SIZE];
                mdev4[0] += mdev4[i*WORKGROUP_SIZE];
            }
            // calculate final result
            result[0] = mdev4[0] / pow(mdev2[0], 2);
        }
    }
}