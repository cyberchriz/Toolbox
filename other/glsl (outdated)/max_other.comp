// this Vulkan/GLSL compute shader takes the highest of a given array element
// and the corresponding element of 'other' and stores the result in a new array

#version 450
#define WORKGROUP_SIZE 256

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup 'other' data buffer
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};

// setup result data buffer
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint other_elements = other_rows * other_cols * other_depth;
uint result_elements = result_rows * result_cols * result_depth;

uint data_subspace_x = data_cols * data_depth;
uint other_subspace_x = other_cols * other_depth;
uint result_subspace_x = result_cols * result_depth;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint data_3dx = uint(x / data_subspace_x);
    uint data_3dy = uint((x % data_subspace_x) / data_depth);
    uint data_3dz = uint((x % data_subspace_x) % data_depth);
    uint other_x = data_3dx * other_subspace_x + data_3dy * other_depth + data_3dz;
    uint result_x = data_3dx * result_subspace_x + data_3dy * result_depth + data_3dz;

    if (result_x < result_elements) {
        if (x < data_elements) {
            if (other_x < other_elements) {
                result[result_x] = max(data[x], other[other_x]);
            }
            else {
                result[result_x] = data[x];
            }
        }
        else {
            if (other_x < other_elements) {
                result[result_x] = other[other_x];
            }
            else {
                result[result_x] = 0.0f / 0.0f;
            }
        }
    }
}