// this Vulkan/GLSL compute shader rearranges the array elements based on an index
// map passed as 'other'
// the result matrix and index map ('other') must have the same size

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup 'other' data buffer = target_index_map
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};

// setup result data buffer
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_3)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float constant1;        // not used for this shader
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint result_elements = result_rows * result_cols * result_depth;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint target_index = uint(other[x]);
    if (target_index < result_elements) {
        result[target_index] = data[x];
    }
}