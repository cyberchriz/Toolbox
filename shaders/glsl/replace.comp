// this Vulkan/GLSL compute shader searches the array for any matches
// of the 'old_value' (as specified via push constant) and replaces any finding
// with the specified 'new_value'; all other value of 'this' remain unchanged;
// the result is stored as a new array

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_2)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float old_value;
    float new_value;
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint result_elements = result_rows * result_cols * result_depth;
float epsilon = 0.0000001;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < result_elements) {
        result[result_flat_index] =
            abs(data[result_flat_index] - old_value) <= epsilon ? new_value : data[result_flat_index];
    }
}