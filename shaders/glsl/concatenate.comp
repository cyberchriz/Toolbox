// this Vulkan/GLSL compute shader implements concatenation of two arrays

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint other_elements = other_rows * other_cols * other_depth;
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;
uint other_subspace_x = other_cols * other_depth;
float nan = 0.0 / 0.0;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < result_elements) {
        uint result_3dx = uint(result_flat_index/result_subspace_x);
        uint result_3dy = uint((result_flat_index % result_subspace_x) / result_depth);
        uint result_3dz = uint((result_flat_index % result_subspace_x) % result_depth);
        // concatenation along row axis
        if (result_3dx >= data_rows) {
            uint other_3dx = result_3dx - data_rows;
            uint other_flat_index = other_3dx * other_subspace_x + result_3dy * other_depth + result_3dz;
            if (other_flat_index < other_elements) {
                result[result_flat_index] = other[other_flat_index];
            }
            else {
                result[result_flat_index] = nan;
            }
        }
        // concatenation along column axis
        else if (result_3dy >= data_cols) {
            uint other_3dy = result_3dy - data_cols;
            uint other_flat_index = result_3dx * other_subspace_x + other_3dy * other_depth + result_3dz;
            if (other_flat_index < other_elements) {
                result[result_flat_index] = other[other_flat_index];
            }
            else {
                result[result_flat_index] = nan;
            }
        }
        // concatenation along depth axis
        else if (result_3dz >= data_depth) {
            uint other_3dz = result_3dz - data_depth;
            uint other_flat_index = result_3dx * other_subspace_x + result_3dy * other_depth + other_3dz;
            if (other_flat_index < other_elements) {
                result[result_flat_index] = other[other_flat_index];
            }
            else {
                result[result_flat_index] = nan;
            }
        }
        // copy any elements that don't exceed the original dimensions of 'this'
        else {
            uint data_flat_index = result_3dx * data_subspace_x + result_3dy * data_depth + result_3dz;
            if (data_flat_index < data_elements) {
                result[result_flat_index] = data[data_flat_index];
            }
            else {
                result[result_flat_index] = nan;
            }
        }
    }
}