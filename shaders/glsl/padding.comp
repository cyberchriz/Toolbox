// this Vulkan/GLSL compute shader add padding of the passed value around the array

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    uint before_rows;
    uint before_cols;
    uint above_layers;

    float value;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < result_elements) {
        uint result_3dx = uint(x/result_subspace_x);
        uint result_3dy = uint((x % result_subspace_x) / result_depth);
        uint result_3dz = uint((x % result_subspace_x) % result_depth);
        if (
            result_3dx < before_rows ||
            result_3dx >= before_rows + data_rows ||
            result_3dy < before_cols ||
            result_3dy >= before_cols + data_cols ||
            result_3dz < above_layers ||
            result_3dz >= above_layers + data_depth
        )   {
            result[x] = value;
        }
        else {
            uint data_3dx = result_3dx - before_rows;
            uint data_3dy = result_3dy - before_cols;
            uint data_3dz = result_3dz - above_layers;
            uint data_flat_index = data_3dx * data_subspace_x + data_3dy * data_depth + data_3dz;
            result[x] = data[data_flat_index];
        }
    }
}