// this Vulkan/GLSL compute shader randomly sets the specified
// fraction of elements to zero (as passed via 'ratio' push constant)
// and keeps all other elements unmodified

#version 450
#define WORKGROUP_SIZE 256

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_elements;
    uint seed;
    float ratio;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// set global variables
uint state[4];
bool initialized = false;

// XorShift128 random number generator
float random(uint seed) {

  if (!initialized) {
    state[0] = seed;
    for (int i = 1; i < 4; ++i) {
      state[i] = state[i - 1] * 0x343fd45e;
    }
    initialized = true;
  }

  uint x = state[0];
  uint y = state[2];
  state[0] = state[1];
  state[1] = state[2];
  state[2] = state[3];
  state[3] = x ^ y ^ (x << 13) ^ (y << 17) ^ (x >> 15) ^ (y >> 18);

  // Mask and scale to [0, 1]
  return float(state[3] & 0xffffffff) / 4294967295.0;
}

// main function
void main() {
    if (gl_GlobalInvocationID.x < data_elements && random(seed + (gl_GlobalInvocationID.x + 1)) < ratio) {
        data[gl_GlobalInvocationID.x] = 0;
    }
}