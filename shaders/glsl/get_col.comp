// this Vulkan/GLSL compute shader slices a single column
// (specified as the 'source_col' argument via push constant)
// from a 2d or 3d matrix

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_4)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;
    
    uint source_col;
    uint constant2; // not used by this shader
    uint constant3; // not used by this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;
uint result_elements = result_subspace_x * result_rows;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < result_elements) {
        uint result_3dx = uint(result_flat_index/result_subspace_x);
        // uint result_3dy = uint((result_flat_index % result_subspace_x) / result_depth);
        uint result_3dz = uint((result_flat_index % result_subspace_x) % result_depth);
        uint data_flat_index = result_3dx * data_subspace_x + source_col * data_depth + result_3dz;
        result[result_flat_index] = data[data_flat_index];
    }
}