// this Vulkan/GLSL compute shader fills the matrix
// with the identity matrix

#version 450
#define WORKGROUP_SIZE 128

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint data_subspace_x = data_depth * data_cols;

// main function
void main() {
    uint data_flat_index = gl_GlobalInvocationID.x;
    if (data_flat_index < data_elements) {
        uint data_3dx = uint(data_flat_index/data_subspace_x);
        uint data_3dy = uint((data_flat_index % data_subspace_x) / data_depth);
        uint data_3dz = uint((data_flat_index % data_subspace_x) % data_depth);
        data[data_flat_index] = float(data_3dx == data_3dy);
    }
}