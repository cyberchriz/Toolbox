// this Vulkan/GLSL compute shader substracts the elements of 'other'
// elementwise from to the corresponding elements of 'this'

#version 450
#define WORKGROUP_SIZE 256

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup 'other' data buffer
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};

// setup result data buffer
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint data_subspace_x = data_cols * data_depth;
uint other_elements = other_rows * other_cols * other_depth;
uint other_subspace_x = other_cols * other_depth;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint data_3dx = uint(x / data_subspace_x);
    uint data_3dy = uint((x % data_subspace_x) / data_depth);
    uint data_3dz = uint((x % data_subspace_x) % data_depth);
    uint other_flat_index = data_3dx * other_subspace_x + data_3dy * other_depth + data_3dz;
    if (x < data_elements && other_flat_index < other_elements) {
        result[x] = data[x] - other[other_flat_index];
    }
}