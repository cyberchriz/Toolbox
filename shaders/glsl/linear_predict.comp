// this Vulkan/GLSL compute shader implements linear prediction
// based on a given y axis intercept and slope (as given via push constants)

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float y_intercept;
    float slope;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint result_elements = result_rows * result_cols * result_depth;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < result_elements) {
        result[result_flat_index] = data[result_flat_index] * slope + y_intercept;
    }
}