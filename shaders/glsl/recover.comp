// this Vulkan/GLSL compute shader tries to recover invalid elements
// by substituting
// -inf with a large negative number,
// +inf with a large positive number,
// NaN with a very small positive number

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_elements;
    uint seed;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// set global variables
uint state[4];
bool initialized = false;

// random number generator
// XorShift128 random number generator
float random(uint seed) {

  if (!initialized) {
    state[0] = seed;
    for (int i = 1; i < 4; ++i) {
      state[i] = state[i - 1] * 0x343fd45e;
    }
    initialized = true;
  }

  uint x = state[0];
  uint y = state[2];
  state[0] = state[1];
  state[1] = state[2];
  state[2] = state[3];
  state[3] = x ^ y ^ (x << 13) ^ (y << 17) ^ (x >> 15) ^ (y >> 18);

  // Mask and scale to [0, 1]
  return float(state[3] & 0xffffffff) / 4294967295.0;
}

// setup global variables
float FLT_MAX = 3.4e+35;
float FLT_MIN = 1.2e-35;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < data_elements) {
        float current_value = data[x];

        // check for infinity
        if (isinf(current_value)) {
            float random_factor = 1 - 0.1 * random(seed * (x + 1)); // factor between 0.9 and 1.0
            // check for positive infinity
            if (current_value > 0) {
                result[x] = random_factor * FLT_MAX;
            }
            // check for negative infinity
            else {
                result[x] = -random_factor * FLT_MAX;
            }
        }
        // check for 'not a number' (NaN)
        else if (isnan(current_value)) {
            result[x] = FLT_MIN * (1 +  random(seed * (x + 1)));
        }
        // retain original
        else {
            result[x] = current_value;
        }
    }
}