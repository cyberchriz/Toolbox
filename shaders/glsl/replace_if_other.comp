// this Vulkan/GLSL compute shader replaces all elements of 'data' with the corresponding element of the
// 'replacing_map' (other2) if the corresponding element of the condition map (other1) is !=0

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup 'other1' data buffer
layout(set = 0, binding = 2) buffer Other1Buffer {
    float other1[];
};

// setup 'other2' data buffer
layout(set = 0, binding = 3) buffer Other2Buffer {
    float other2[];
};

// setup push constants layout (according to shader_exec OVERLOAD_8)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    uint other1_rows;
    uint other1_cols;
    uint other1_depth;

    uint other2_rows;
    uint other2_cols;
    uint other2_depth;

    float constant1;        // not used for this shader
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint other1_elements = other1_rows * other1_cols * other1_depth;
uint other2_elements = other2_rows * other2_cols * other2_depth;
uint result_elements = result_rows * result_cols * result_depth;
float epsilon = 0.0000001;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < result_elements && x < other1_elements && x < other2_elements && x < data_elements) {
        result[x] = abs(other1[x]) > epsilon ? other2[x] : data[x];
    }
}