// this Vulkan/GLSL compute shader takes the highest of a given array element
// and the corresponding element of 'other' and stores the result in a new array

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup 'other' data buffer
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};

// setup result data buffer
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_3)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float constant1;        // not used for this shader
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint other_elements = other_rows * other_cols * other_depth;
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;
uint other_subspace_x = other_cols * other_depth;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < data_elements && result_flat_index < other_elements && result_flat_index < result_elements) {
        uint result_3dx = uint(result_flat_index/result_subspace_x);
        uint result_3dy = uint((result_flat_index % result_subspace_x) / result_depth);
        uint result_3dz = uint((result_flat_index % result_subspace_x) % result_depth);
        uint data_flat_index = result_3dx * data_subspace_x + result_3dy * data_depth + result_3dz;
        uint other_flat_index = result_3dx * other_subspace_x + result_3dy * other_depth + result_3dz;
        result[result_flat_index] = max(data[data_flat_index], other[other_flat_index]);
    }
}