// this Vulkan/GLSL compute shader calculates the Hadamard product,
// i.e. the result of elementwise multiplication of the elements
// of 'this' and 'other' matrix

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup 'other' data buffer
layout(set = 0, binding = 1) buffer OtherBuffer {
    float other[];
};

// setup result data buffer
layout(set = 0, binding = 2) buffer ResultBuffer {
    float result[];
};

// setup push constants layout (according to shader_exec OVERLOAD_3)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint other_rows;
    uint other_cols;
    uint other_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    float constant1;        // not used for this shader
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint other_elements = other_rows * other_cols * other_depth;
uint result_elements = result_rows * result_cols * result_depth;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < data_elements && result_flat_index < other_elements && result_flat_index < result_elements) {
        result[result_flat_index] = data[result_flat_index] * other[result_flat_index];
    }
}