// this Vulkan/GLSL compute shader implements mean pooling

#version 450
#define WORKGROUP_SIZE 256

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;

    uint slider_rows;
    uint slider_cols;
    uint slider_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;
uint data_subspace_x = data_cols * data_depth;
float nan = 0.0 / 0.0;

// main function
void main() {
    uint result_flat_index = gl_GlobalInvocationID.x;
    if (result_flat_index < result_elements) {
        uint result_3dx = uint(result_flat_index/result_subspace_x);
        uint result_3dy = uint((result_flat_index % result_subspace_x) / result_depth);
        uint result_3dz = uint((result_flat_index % result_subspace_x) % result_depth);
        uint data_x = result_3dx * slider_rows;
        uint data_y = result_3dy * slider_cols;
        uint data_z = result_3dz * slider_depth;
        float item_sum = 0;
        uint items = 0;
        uint data_flat_index =
            data_x * data_subspace_x +
            data_y * data_depth + 
            data_z;
        if (data_flat_index < data_elements) {
            for (uint x = 0; x < slider_rows; x++) {
                for (uint y = 0; y < slider_cols; y++) {
                    for (uint z = 0; z < slider_depth; z++) {
                        data_flat_index =
                            (data_x + x) * data_subspace_x +
                            (data_y + y) * data_depth + 
                            (data_z + z);
                        if (data_flat_index < data_elements) {
                            item_sum += data[data_flat_index];
                            items++;
                        }
                    }
                }
            }
        }
        result[result_flat_index] = item_sum / items;
    }
}