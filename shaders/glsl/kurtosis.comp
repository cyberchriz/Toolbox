// this Vulkan/GLSL compute shader calculates the sample kurtosis of the
// data buffer elements across all dimensions
// via parallel reduction and stores the final result in result[0]

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};

// setup mdev2 buffer
layout(set = 0, binding = 2) buffer Mdev2Buffer {
    float mdev2[];
};

// setup mdev3 buffer
layout(set = 0, binding = 3) buffer Mdev4Buffer {
    float mdev4[];
};

// setup result data buffer
layout(set = 0, binding = 3) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_elements;
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < data_elements) {
        // copy elements from data to mdev2 buffer
        mdev2[x] = data[x];
        memoryBarrierShared();

        // calculate sum via parallel reduction
        for (uint i = 1; i < data_elements; i*=2) {
            if (x % (2*i) == 0 && x+i < data_elements) {
                mdev2[x] += mdev2[x+i];
            }
            memoryBarrierShared();
        }
        float mean = mdev2[0] / data_elements;
        memoryBarrierShared();

        // store squared and cubic mean deviation in corresponding buffers
        mdev2[x] = pow(data[x] - mean, 2);
        mdev4[x] = pow(data[x] - mean, 4);
        memoryBarrierShared();

        // calculate sums of squared and quartic mean deviations via parallel reduction
        for (uint i = 1; i < data_elements; i*=2) {
            if (x % (2*i) == 0 && x+i < data_elements) {
                mdev2[x] += mdev2[x+i];
                mdev4[x] += mdev4[x+1];
            }
            memoryBarrierShared();
        }
        // calculate final result
        if (x == 0) {
            result[0] = mdev4[0] / pow(mdev2[0], 2);
        }
    }
}