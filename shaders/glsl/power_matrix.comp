// this Vulkan/GLSL compute shader creates a 2d power matrix of the values
// of the 1d data array raised to the power of the result column index

#version 450
#define WORKGROUP_SIZE 256

// setup buffers
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
layout(set = 0, binding = 1) buffer ResultBuffer {
    float result[];
};

// setup push constants layout
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    uint result_rows;
    uint result_cols;
    uint result_depth;
};

// setup local size according to workgroup size
layout(local_size_x = WORKGROUP_SIZE) in;

// setup global variables
uint result_elements = result_rows * result_cols * result_depth;
uint result_subspace_x = result_cols * result_depth;

// main function
void main() {
    uint x = gl_GlobalInvocationID.x;
    if (x < result_elements) {
        uint result_3dx = uint(x/result_subspace_x);
        uint result_3dy = uint((x % result_subspace_x) / result_depth);
        result[x] = pow(data[result_3dx], result_3dy);
    }
}