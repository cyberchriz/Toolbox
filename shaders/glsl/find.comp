// this Vulkan/GLSL compute shader counts any occurrence of the specified value
// and stores the result in an integer buffer with a single element

#version 450

// setup source data buffer
layout(set = 0, binding = 0) buffer DataBuffer {
    float data[];
};
        
// setup result data buffer
layout(set = 0, binding = 1) buffer ResultBuffer {
    int result[]; // result[0] is initialized to 0
};

// setup push constants layout (according to shader_exec OVERLOAD_5)
layout(push_constant) uniform PushConstants {
    uint data_rows;
    uint data_cols;
    uint data_depth;

    float value;
    float constant2;        // not used for this shader
    float constant3;        // not used for this shader
};

// setup local size according to workgroup size
layout(local_size_x = 32) in;

// setup global variables
uint data_elements = data_rows * data_cols * data_depth;
float epsilon = 0.0000001;

// main function
void main() {
    uint data_flat_index = gl_GlobalInvocationID.x;
    if (data_flat_index < data_elements) {
        if (abs(data[data_flat_index] - value) <= epsilon) {
            atomicAdd(result[0], 1);
        }
    }
}