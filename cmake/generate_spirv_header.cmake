# generate_spirv_header.cmake
#
# Input variables (set via cmake -D... -P):
#   SPIRV_FILE_LIST_PATH  - Path to a file containing the list of input SPIR-V files (one per line). <--- CHANGED
#   OUTPUT_HEADER         - Full path to the output C++ header file (in build dir).
#   GENERATED_HEADER_DIR  - Path to the output directory for the header (in build dir).
#   PROJECT_SPIRV_DIR     - Path to the SPIR-V directory (for relative naming)
#

set(VERBOSE ON CACHE BOOL "Verbose output for debugging" FORCE)

# Variable Check
if(NOT DEFINED SPIRV_FILE_LIST_PATH OR NOT DEFINED OUTPUT_HEADER OR NOT DEFINED GENERATED_HEADER_DIR OR NOT DEFINED PROJECT_SPIRV_DIR)
    message(FATAL_ERROR "generate_spirv_header.cmake requires SPIRV_FILE_LIST_PATH, OUTPUT_HEADER, GENERATED_HEADER_DIR, and PROJECT_SPIRV_DIR to be defined.")
endif()
if(VERBOSE)
    message(STATUS "\n===============================================================\nEXECUTING SCRIPT 'generate_spirv_header.cmake', VERBOSE MODE ON\n===============================================================\n")
    message(STATUS "  Working Directory CMAKE_CURRENT_BINARY_DIR (Implicit): ${CMAKE_CURRENT_BINARY_DIR}")
    message(STATUS "  Input SPIRV File List Path: [${SPIRV_FILE_LIST_PATH}]")
    message(STATUS "  OUTPUT_HEADER: ${OUTPUT_HEADER}")
    message(STATUS "  GENERATED_HEADER_DIR: ${GENERATED_HEADER_DIR}")
    message(STATUS "  PROJECT_SPIRV_DIR: ${PROJECT_SPIRV_DIR}")
endif()

# Ensure the output directory exists
file(MAKE_DIRECTORY "${GENERATED_HEADER_DIR}")

# Read List From File
if(NOT EXISTS "${SPIRV_FILE_LIST_PATH}")
    message(FATAL_ERROR "SPIR-V file list not found at specified path: ${SPIRV_FILE_LIST_PATH}")
else()
    # Read the list file, each line becomes an element in the CMake list SPIRV_FILES_LIST
    file(STRINGS "${SPIRV_FILE_LIST_PATH}" SPIRV_FILES_LIST)
endif()

# Check if list is empty after reading
if(NOT SPIRV_FILES_LIST AND VERBOSE)
    message(WARNING "SPIR-V file list read from ${SPIRV_FILE_LIST_PATH} is empty.")
elseif(VERBOSE)
    message(STATUS "  Files read from list file (${SPIRV_FILE_LIST_PATH}): ${SPIRV_FILES_LIST}")
endif()

# Start the header file
file(WRITE "${OUTPUT_HEADER}" "#ifndef SPIRV_BIN_H\n#define SPIRV_BIN_H\n\n// Generated by CMake. Do not edit.\n\n\n")
set(BYTES_PER_LINE 256) # change if needed (only for readability, not functionality)

# Loop over the list read from the file
foreach(SPIRV_FILE ${SPIRV_FILES_LIST})
    string(REPLACE "\"" "" SPIRV_FILE "${SPIRV_FILE}") # Remove quotes from the input string
    string(STRIP "${SPIRV_FILE}" SPIRV_FILE) # Remove surrounding whitespace
    
    # Skip empty lines potentially read from the file
    if(SPIRV_FILE STREQUAL "")
        continue()
    endif()

    if(VERBOSE)
        message(STATUS "  processing list item: ${SPIRV_FILE}")
    endif()

    # check if file exists
    if(NOT EXISTS "${SPIRV_FILE}")
        message(WARNING "  file in list does not exist: ${SPIRV_FILE}")
        continue() # Skip this file
    endif()

    get_filename_component(FILENAME ${SPIRV_FILE} NAME)
    string(REGEX REPLACE "\\..*" "" FILENAME ${FILENAME}) # extract the base name by removing the first dot and everything after
    string(REGEX REPLACE "[^a-zA-Z0-9_]" "_" FILENAME ${FILENAME}) # Create a C++-safe variable name from the filename, Replace non-alphanumeric characters with underscores
    string(TOUPPER "${FILENAME}" VAR_NAME) # make all UPPER_CASE

    # Read the binary content as a hex string
    file(READ "${SPIRV_FILE}" SPV_CONTENT_HEX HEX)
    string(LENGTH "${SPV_CONTENT_HEX}" SPV_HEX_LENGTH)

    if(SPV_HEX_LENGTH EQUAL 0)
         message(WARNING "  SPIR-V file is empty or read failed: ${SPIRV_FILE}")
         continue() # Skip empty files
    elseif(VERBOSE)
         message(STATUS "    -> next variable name: ${VAR_NAME}, spirv HEX length: ${SPV_HEX_LENGTH} characters")
    endif()

    # Calculate number of bytes (each byte is 2 hex chars)
    math(EXPR NUM_BYTES "${SPV_HEX_LENGTH} / 2")

    # Start the C++ array definition
    file(APPEND "${OUTPUT_HEADER}" "constexpr size_t ${VAR_NAME}_SPIRV_BYTES = ${NUM_BYTES};\nconstexpr unsigned char ${VAR_NAME}_SPIRV_BIN[] = {\n    ")
    set(BYTE_COUNT 0)

    # Loop through the hex string, two characters (one byte) at a time
    while(BYTE_COUNT LESS NUM_BYTES)
        math(EXPR HEX_INDEX "${BYTE_COUNT} * 2")
        string(SUBSTRING "${SPV_CONTENT_HEX}" ${HEX_INDEX} 2 BYTE_HEX)

        # Append the byte as 0xXX
        file(APPEND "${OUTPUT_HEADER}" "0x${BYTE_HEX}")
        math(EXPR BYTE_COUNT "${BYTE_COUNT} + 1")

        # Add comma if not the last byte
        if(BYTE_COUNT LESS NUM_BYTES)
            file(APPEND "${OUTPUT_HEADER}" ",")

            # Add newline and indentation every N bytes
            math(EXPR NEWLINE_CHECK "${BYTE_COUNT} % ${BYTES_PER_LINE}")
            if(NEWLINE_CHECK EQUAL 0)
                file(APPEND "${OUTPUT_HEADER}" "\n    ")
            else()
                file(APPEND "${OUTPUT_HEADER}" " ") # Add space after comma
            endif()
        endif()
    endwhile()


    # Close the array definition and add a variable for the size in bytes
    file(APPEND "${OUTPUT_HEADER}" "\n};\n\n")

endforeach()


file(APPEND "${OUTPUT_HEADER}" "\n\n#endif")

message(STATUS "SPIR-V C++ header generated: ${OUTPUT_HEADER}") 